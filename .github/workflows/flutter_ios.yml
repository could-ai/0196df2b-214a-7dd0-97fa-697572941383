name: Flutter iOS Build and Publish
on:
  workflow_dispatch: # Allows manual triggering of the workflow
    inputs:
      package_name:
        description: "iOS bundle identifier"
        required: true
        default: "com.example.couldai_user_app"
jobs:
  flutter_ios_build_publish:
    runs-on: macos-latest
    steps: 
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          channel: 'stable'
      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
      - name: Get dependencies
        working-directory: ./usr
        run: flutter pub get
      - name: Setup iOS certificates and provisioning profiles
        run: |
          echo "Setting up iOS signing configuration..."
          # Create temporary keychain
          KEYCHAIN_NAME="flutter_ios_keychain"
          KEYCHAIN_PASSWORD="temporary_password"
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          security default-keychain -s "$KEYCHAIN_NAME"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          security set-keychain-settings -t 3600 -l "$KEYCHAIN_NAME"
          
          # Import certificates to keychain
          echo "${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_BASE64 }}" | base64 --decode > distribution_certificate.p12
          echo "${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_PASSWORD }}" > certificate_password.txt
          security import distribution_certificate.p12 -k "$KEYCHAIN_NAME" -P "$(cat certificate_password.txt)" -A
          
          # Create provisioning profiles directory
          mkdir -p ~/Library/MobileDevice/Provisioning\\ Profiles
          
          # Install provisioning profile
          echo "${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > provisioning_profile.mobileprovision
          UUID=$(grep -a -A 1 "UUID" provisioning_profile.mobileprovision | grep -o "[-A-Za-z0-9]\\{36\\}")
          cp provisioning_profile.mobileprovision ~/Library/MobileDevice/Provisioning\\ Profiles/"$UUID".mobileprovision
      - name: Build iOS application
        working-directory: ./usr
        run: flutter build ios --release
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-release-build
          path: ./usr/build/ios/iphoneos
          retention-days: 7
      - name: Create iOS Fastfile
        run: |
          mkdir -p ./usr/ios/fastlane
          echo '# Disable Fastlane'"'"'s usage data collection' > ./usr/ios/fastlane/Fastfile
          echo 'opt_out_usage' >> ./usr/ios/fastlane/Fastfile
          echo '' >> ./usr/ios/fastlane/Fastfile
          echo 'default_platform(:ios)' >> ./usr/ios/fastlane/Fastfile
          echo '' >> ./usr/ios/fastlane/Fastfile
          echo 'platform :ios do' >> ./usr/ios/fastlane/Fastfile
          echo '  desc "Deploy to App Store Connect"' >> ./usr/ios/fastlane/Fastfile
          echo '  lane :publish_to_app_store do' >> ./usr/ios/fastlane/Fastfile
          echo '    puts "Using bundle identifier: ${{ github.event.inputs.package_name }}"' >> ./usr/ios/fastlane/Fastfile
          echo '    ' >> ./usr/ios/fastlane/Fastfile
          echo '    # Build and sign the application' >> ./usr/ios/fastlane/Fastfile
          echo '    build_app(' >> ./usr/ios/fastlane/Fastfile
          echo '      workspace: "../ios/Runner.xcworkspace",' >> ./usr/ios/fastlane/Fastfile
          echo '      scheme: "Runner",' >> ./usr/ios/fastlane/Fastfile
          echo '      export_method: "app-store",' >> ./usr/ios/fastlane/Fastfile
          echo '      export_options: {' >> ./usr/ios/fastlane/Fastfile
          echo '        provisioningProfiles: { ' >> ./usr/ios/fastlane/Fastfile
          echo '          "${{ github.event.inputs.package_name }}" => "App Store Distribution Profile"' >> ./usr/ios/fastlane/Fastfile
          echo '        }' >> ./usr/ios/fastlane/Fastfile
          echo '      },' >> ./usr/ios/fastlane/Fastfile
          echo '      silent: true,' >> ./usr/ios/fastlane/Fastfile
          echo '      clean: true' >> ./usr/ios/fastlane/Fastfile
          echo '    )' >> ./usr/ios/fastlane/Fastfile
          echo '    ' >> ./usr/ios/fastlane/Fastfile
          echo '    # Upload to App Store Connect' >> ./usr/ios/fastlane/Fastfile
          echo '    upload_to_app_store(' >> ./usr/ios/fastlane/Fastfile
          echo '      app_identifier: "${{ github.event.inputs.package_name }}",' >> ./usr/ios/fastlane/Fastfile
          echo '      app_version: get_version_number(xcodeproj: "../ios/Runner.xcodeproj"),' >> ./usr/ios/fastlane/Fastfile
          echo '      skip_metadata: true,' >> ./usr/ios/fastlane/Fastfile
          echo '      skip_screenshots: true,' >> ./usr/ios/fastlane/Fastfile
          echo '      skip_app_version_update: false,' >> ./usr/ios/fastlane/Fastfile
          echo '      force: true,' >> ./usr/ios/fastlane/Fastfile
          echo '      precheck_include_in_app_purchases: false,' >> ./usr/ios/fastlane/Fastfile
          echo '      submit_for_review: false' >> ./usr/ios/fastlane/Fastfile
          echo '    )' >> ./usr/ios/fastlane/Fastfile
          echo '  end' >> ./usr/ios/fastlane/Fastfile
          echo 'end' >> ./usr/ios/fastlane/Fastfile
      - name: Install Fastlane
        run: gem install fastlane
      - name: Check Fastlane configuration
        working-directory: ./usr/ios
        run: |
          echo "Checking Fastlane directory structure:"
          ls -la fastlane/
          echo "\nChecking Fastfile content:"
          cat fastlane/Fastfile
      - name: Deploy to App Store
        id: deploy_to_app_store
        working-directory: ./usr/ios
        env:
          FASTLANE_USER: ${{ secrets.APPLE_ID }}
          FASTLANE_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APPLICATION_SPECIFIC_PASSWORD }}
          FASTLANE_DONT_STORE_PASSWORD: true
          FASTLANE_SKIP_UPDATE_CHECK: true
        run: fastlane publish_to_app_store